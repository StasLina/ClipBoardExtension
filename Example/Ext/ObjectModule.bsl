Перем Ожидается;

#Область НаборТестов

Процедура ЗаполнитьНаборТестов(ЮнитТест) Экспорт
	
	Ожидается = ЮнитТест;
	ЮнитТест.Добавить("Тест_ИнициализацияБиблиотеки", "Инициализация библиотеки");
	ЮнитТест.Добавить("Тест_СвойстваУправлениеОкнами", "Свойства WindowsControl");
	ЮнитТест.Добавить("Тест_МетодыУправлениеОкнами", "Методы WindowsControl");
	ЮнитТест.Добавить("Тест_ПолучениеСнимкаЭкрана", "Получение снимка экрана");
	
КонецПроцедуры

Процедура Тест_ИнициализацияБиблиотеки() Экспорт
	
	ИдКомпоненты = "VanessaExt";
	МакетКомпоненты = ПолучитьМакет(ИдКомпоненты);
	АдресКомпоненты = ПоместитьВоВременноеХранилище(МакетКомпоненты);
	
	Ожидается.Тест("Подключение бибилиотеки компонент");
	Подключено = ПодключитьВнешнююКомпоненту(АдресКомпоненты, ИдКомпоненты, ТипВнешнейКомпоненты.Native);
	Ожидается.Что(Подключено).ЕстьИстина();
	
	ИменаКомпонент = Новый Структура("WindowsControl,ProcessControl,ClipboardControl,GitFor1C");
	Для каждого КлючЗначение из ИменаКомпонент Цикл
		Ожидается.Тест("Создание объкта: " + КлючЗначение.Ключ);
		ИмяКомпоненты = "AddIn." + ИдКомпоненты + "." + КлючЗначение.Ключ;
		Ожидается.Что(Новый(ИмяКомпоненты)).ИмеетТип(ИмяКомпоненты);
	КонецЦикла;
	
КонецПроцедуры

Процедура Тест_СвойстваУправлениеОкнами() Экспорт
	
	ВК = Новый("AddIn.VanessaExt.WindowsControl");
	
	Ожидается.Тест().Что(ВК).Получить("Version").ИмеетТип("Строка");
	Ожидается.Тест().Что(ВК).Получить("Версия").ИмеетТип("Строка");
	Ожидается.Тест().Что(ВК).Получить("ВЕРСИЯ").ИмеетТип("Строка");
	Ожидается.Тест().Что(ВК).Получить("ProcessId").Больше(0);
	Ожидается.Тест().Что(ВК).Получить("ИдентификаторПроцесса").Больше(0);
	Ожидается.Тест().Что(ВК).Получить("АктивноеОкно").Больше(0);
	
	ИмяСвойства = "ТекстБуфераОбмена";
	ТестовыеДанные = "Текст примера для проверки";
	Ожидается.Тест().Что(ВК).Установить(ИмяСвойства, ТестовыеДанные);
	Ожидается.Тест().Получить(ИмяСвойства).Равно(ТестовыеДанные);
	
	ИмяСвойства = "КартинкаБуфераОбмена";
	ТестовыеДанные = ПолучитьЛоготип1С();
	Ожидается.Тест().Что(ВК).Установить(ИмяСвойства, ТестовыеДанные);
	Ожидается.Тест().Получить(ИмяСвойства).ЭтоКартинка();
	
	Ожидается.Тест().Что(ВК).Получить("СвойстваЭкрана");
	Ожидается.Тест().Что(ВК).Получить("СписокДисплеев");
	Ожидается.Тест().Что(ВК).Получить("СписокОкон");
	Ожидается.Тест().Что(ВК).Получить("ПозицияКурсора");
	
КонецПроцедуры

Процедура Тест_МетодыУправлениеОкнами() Экспорт
	
	ВК = Новый("AddIn.VanessaExt.WindowsControl");
	
	Ожидается.Тест().Что(ВК).Функц("НайтиКлиентТестирования", 48000);
	Ожидается.Тест().Что(ВК).Функц("ПолучитьСписокПроцессов", Истина);
	Ожидается.Тест().Что(ВК).Функц("ПолучитьСписокДисплеев");
	Ожидается.Тест().Что(ВК).Функц("ПолучитьСвойстваОкна", 0);
	
	ИдентификаторОкна = Ожидается.Тест().Что(ВК).Получить("АктивноеОкно").Значение();
	ИдентификаторПроцесса = Ожидается.Тест().Что(ВК).Получить("ИдентификаторПроцесса").Значение();
	СвойстваОкна = Ожидается.Тест().Что(ВК).Функц("ПолучитьСвойстваОкна", ИдентификаторОкна).ЗначениеJSON();
	Ожидается.Тест("Проверка идентификатора процесса").Что(СвойстваОкна).Получить("ProcessId").Равно(ИдентификаторПроцесса);
	
	
	Ожидается.Тест().Что(ВК).Функц("ПолучитьСписокДисплеев", ИдентификаторОкна);
	Ожидается.Тест().Что(ВК).Функц("ПолучитьСвойстваДисплея", ИдентификаторОкна);
	Ожидается.Тест().Что(ВК).Функц("ПолучитьСвойстваОкна", ИдентификаторОкна);
	Ожидается.Тест().Что(ВК).Функц("ПолучитьСписокОкон", ИдентификаторПроцесса);
	
	Размеры = Ожидается.Тест().Что(ВК).Функц("ПолучитьРазмерОкна", ИдентификаторОкна).ЗначениеJSON();
	Ожидается.Тест().Что(ВК).Проц("АктивироватьОкно", ИдентификаторПроцесса);
	Ожидается.Тест().Что(ВК).Проц("РаспахнутьОкно", ИдентификаторПроцесса);
	Ожидается.Тест().Что(ВК).Проц("РазвернутьОкно", ИдентификаторПроцесса);
	Ожидается.Тест().Что(ВК).Проц("СвернутьОкно", ИдентификаторПроцесса);
	Ожидается.Тест().Что(ВК).Проц("Пауза", 100);
	Ожидается.Тест().Что(ВК).Проц("РазвернутьОкно", ИдентификаторПроцесса);
	
	Ожидается.Тест().Что(ВК).Проц("УстановитьРазмерОкна", ИдентификаторОкна, Размеры.Width - 1, Размеры.Height - 1);
	Ожидается.Тест().Что(ВК).Проц("УстановитьПозициюОкна", ИдентификаторОкна, Размеры.Left + 1, Размеры.Top + 1);
	НовыеРазмеры = Ожидается.Тест().Что(ВК).Функц("ПолучитьРазмерОкна", ИдентификаторОкна).ЗначениеJSON();
	
	РазмерыСовпали = Истина
		И (Размеры.Left + 1 = НовыеРазмеры.Left) 
		И (Размеры.Top + 1 = НовыеРазмеры.Top) 
		И (Размеры.Top + 1 = НовыеРазмеры.Top) 
		И (Размеры.Width - 1 = НовыеРазмеры.Width) 
		И (Размеры.Height - 1 = НовыеРазмеры.Height)
		И (Размеры.Right = НовыеРазмеры.Right) 
		И (Размеры.Bottom = НовыеРазмеры.Bottom);
	
	Ожидается.Тест("Размеры и позиция окна совпали").Что(РазмерыСовпали).ЕстьИстина();
	
КонецПроцедуры

Процедура Тест_ПолучениеСнимкаЭкрана() Экспорт
	
	ВК = Новый("AddIn.VanessaExt.WindowsControl");
	
	ИдентификаторОкна = Ожидается.Тест().Что(ВК).Получить("АктивноеОкно").Значение();
	Размеры = Ожидается.Тест().Что(ВК).Функц("ПолучитьРазмерОкна", ИдентификаторОкна).ЗначениеJSON();
	
	СнимокОбласти = Ожидается.Тест().Что(ВК).Функц("ПолучитьСнимокОбласти", Размеры.Left, Размеры.Top, Размеры.Width, Размеры.Height).ЭтоКартинка().Значение();
	СнимокЭкрана = Ожидается.Тест().Что(ВК).Функц("ПолучитьСнимокЭкрана").ЭтоКартинка().Значение();
	СнимокОкна = Ожидается.Тест().Что(ВК).Функц("ПолучитьСнимокЭкрана", 1).ЭтоКартинка().Значение();
	
	Ожидается.Тест().Что(ВК).Функц("ПолучитьСнимокОкна", ИдентификаторОкна).ЭтоКартинка();
	Ожидается.Тест().Что(ВК).Функц("ПолучитьСнимокОкна").ЭтоКартинка();
	
	Координаты = Ожидается.Тест().Что(ВК).Функц("НайтиФрагмент", СнимокЭкрана, СнимокОбласти).ЗначениеJSON();
	Ожидается.Тест("Фрагмент найден на картинке").Что(Координаты).Получить("Match").Больше(0.9);
	Координаты = Ожидается.Тест().Что(ВК).Функц("НайтиНаЭкране", СнимокОбласти).ЗначениеJSON();
	Ожидается.Тест("Фрагмент найден на экране").Что(Координаты).Получить("Match").Больше(0.9);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедуры

Функция JSON(ТекстJSON)
	
	Если ПустаяСтрока(ТекстJSON) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПоляДаты = Новый Массив;
	ПоляДаты.Добавить("CreationDate");
	ПоляДаты.Добавить("date");
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	Возврат ПрочитатьJSON(ЧтениеJSON, , ПоляДаты);
	
КонецФункции

Функция ПолучитьЛоготип1С()
	
	ФайлРесурса = "v8res://mngbase/About.lf";
	ВременныйФайл = ПолучитьИмяВременногоФайла();
	КопироватьФайл(ФайлРесурса, ВременныйФайл);
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ВременныйФайл);
	УдалитьФайлы(ВременныйФайл);
	
	Стр = ТекстовыйДокумент.ПолучитьТекст();
	НачПоз = СтрНайти(Стр, "{#base64:");
	КонПоз = СтрНайти(Стр, "}", , НачПоз);
	Стр = Сред(Стр, НачПоз + 9, КонПоз - НачПоз - 9);
	ДвоичныеДанные = Base64Значение(Стр);
	
	Картинка = Новый Картинка(ДвоичныеДанные);
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("screenDensity", "xdpi");
	Возврат Картинка.ПолучитьДвоичныеДанные(Ложь, Соответствие);
	
КонецФункции

#КонецОбласти


#Область СтарыеТесты

&НаСервере
Функция ПрочитатьТекст(ДвоичныеДанные)
	
	Поток = ДвоичныеДанные.ОткрытьПотокДляЧтения();
	ЧтениеТекста = Новый ЧтениеТекста(Поток);
	Возврат СокрЛП(ЧтениеТекста.Прочитать());
	
КонецФункции	

&НаСервере
Функция ФайлСуществует(ИмяФайла)
	
	Файл = Новый Файл(ИмяФайла);
	Возврат Файл.Существует();
	
КонецФункции	

&НаСервере
Процедура ВыполнитьТестыGit()
	
	//Группа = ДобавитьГруппуТестов(Результаты, "Тестирование GitFor1C");
	//
	//ИмяПапки = "Autotest";
	//ВременнаяПапка = ПолучитьИмяВременногоФайла("git");
	//УдалитьФайлы(ВременнаяПапка);
	//СоздатьКаталог(ВременнаяПапка);
	//Репозиторий = ВременнаяПапка + "/" + ИмяПапки + "/";
	//Подкаталог = Репозиторий + "test";
	//СоздатьКаталог(Репозиторий);
	//СоздатьКаталог(Подкаталог);
	//
	//АдресКлон = "https://github.com/lintest/AddinTemplate.git";
	//ПапкаКлон = ВременнаяПапка + "clone";
	//ФайлКлон = ПапкаКлон + "/LICENSE";
	//
	//ИмяФайла = "example.txt";
	//ПолноеИмя = Репозиторий + ИмяФайла;
	//ТекстовыйДокумент = Новый ТекстовыйДокумент;
	//ТекстовыйДокумент.ДобавитьСтроку(ЧислоПрописью(51243, "L=en_US"));
	//ТекстовыйДокумент.ДобавитьСтроку(ЧислоПрописью(24565, "L=en_US"));
	//ТекстовыйДокумент.Записать(ПолноеИмя, КодировкаТекста.UTF8);
	//
	//ТестВыполнить(Группа, "Назначение автора", "git.SetAuthor(""Автор"", ""author@lintest.ru"")"); 
	//ТестВыполнить(Группа, "Назначение комиттера", "git.SetCommitter(""Комиттер"", ""committer@lintest.ru"")"); 
	//ТестВычислить(Группа, "Версия", "git.version");
	//ТестВычислить(Группа, "Клонирование", "git.clone("""+ АдресКлон +  """, """ + ПапкаКлон + """)", "ФайлСуществует(""" + ФайлКлон + """)");
	//ТестВычислить(Группа, "Информация о коммите", "git.info(""HEAD"")", "JSON(Значение).success");
	//ТестВычислить(Группа, "Список репозиториев", "git.remotes", "JSON(Значение).result[0].name = ""origin"" И JSON(Значение).result[0].url = """ + АдресКлон + """");
	//ТестВычислить(Группа, "Закрытие репозитория", "git.close()", "JSON(Значение).success");
	//ТестВычислить(Группа, "Инициализация", "git.init(""" + Репозиторий + """)", "JSON(Значение).success");
	//ТестВычислить(Группа, "Статус рабочей области", "git.status()", "JSON(Значение).result.work[0].new_name = ""example.txt""");
	//ТестВычислить(Группа, "Добавление в индекс", "git.add(""" + ИмяФайла + """)", "JSON(Значение).success");
	//ТестВычислить(Группа, "Статус индекса", "git.status()", "JSON(Значение).result.index[0].new_name = ""example.txt""");
	//ТестВычислить(Группа, "Первый коммит", "git.commit(""Инициализация"")", "JSON(Значение).success");
	//ТестВычислить(Группа, "Информация о коммите", "git.info(""HEAD"")", "JSON(Значение).result.authorName = ""Автор"" И JSON(Значение).result.committerName = ""Комиттер""");
	//ТестВычислить(Группа, "Закрытие репозитория", "git.close()", "JSON(Значение).success");
	//ТестВычислить(Группа, "Статус закрытого репозитория", "git.status()", "НЕ JSON(Значение).success И JSON(Значение).error.code = 0");
	//
	//ИмяФайла = "текст.txt";
	//ПолноеИмя = Репозиторий + ИмяФайла;
	//ТекстовыйДокумент = Новый ТекстовыйДокумент;
	//ТекстовыйДокумент.ДобавитьСтроку("Содержимое");
	//ТекстовыйДокумент.Записать(ПолноеИмя, КодировкаТекста.UTF8);
	//
	//ТестВычислить(Группа, "Поиск репозитория", "git.find(""" + Подкаталог + """)", "JSON(Значение).success");
	//ТестВычислить(Группа, "Открытие репозитория", "git.open(JSON(Значение).result)", "JSON(Значение).success");
	//ТестВычислить(Группа, "Статус рабочей области", "git.status()", "JSON(Значение).result.work[0].new_name = ""текст.txt""");
	//ТестВычислить(Группа, "Добавление в индекс", "git.add(""" + ИмяФайла + """)", "JSON(Значение).success");
	//ТестВычислить(Группа, "Статус индекса", "git.status()", "JSON(Значение).result.index[0].new_name = ""текст.txt""");
	//ТестВычислить(Группа, "Чтение BLOB из индекса", "git.blob(JSON(Значение).result.index[0].new_id)", "ПрочитатьТекст(Значение) = ""Содержимое""");
	//ТестВычислить(Группа, "Второй коммит", "git.commit(""Второй коммит"")", "JSON(Значение).success");
	//ТестВычислить(Группа, "История", "git.history()", "JSON(Значение).result.Количество() = 2 И JSON(Значение).result[0].message = ""Второй коммит""");
	//ТестВычислить(Группа, "Создание новой ветки", "git.checkout(""develop"", Истина)", "JSON(Значение).success");
	//ТестВычислить(Группа, "Список веток", "git.branches", "JSON(Значение).Количество() = 2");
	//
	//ТекстовыйДокумент = Новый ТекстовыйДокумент;
	//ТекстовыйДокумент.ДобавитьСтроку("Редактирование");
	//ТекстовыйДокумент.Записать(ПолноеИмя, КодировкаТекста.UTF8);
	//
	//ТестВычислить(Группа, "Добавление в индекс", "git.add(""" + ИмяФайла + """)", "JSON(Значение).success");
	//ТестВычислить(Группа, "Статус индекса", "git.status()", "JSON(Значение).result.index[0].new_name = ""текст.txt""");
	//ТестВычислить(Группа, "Удаление из индекса", "git.reset(""" + ИмяФайла + """)", "JSON(Значение).success");
	//ТестВычислить(Группа, "Статус индекса", "git.status()", "JSON(Значение).result.work[0].new_name = ""текст.txt""");
	//ТестВычислить(Группа, "Отмена изменений", "git.discard(""" + ИмяФайла + """)", "JSON(Значение).success");
	//ТестВычислить(Группа, "Нет изменений", "git.status()", "JSON(Значение).result = Неопределено");
	//
	//ТекстовыйДокумент = Новый ТекстовыйДокумент;
	//ТекстовыйДокумент.ДобавитьСтроку("Редактирование");
	//ТекстовыйДокумент.Записать(ПолноеИмя, КодировкаТекста.UTF8);
	//ТестВычислить(Группа, "Добавление в индекс", "git.add(""" + ИмяФайла + """)", "JSON(Значение).success");
	//ТестВычислить(Группа, "Третий коммит", "git.commit(""Третий коммит"")", "JSON(Значение).success");
	//ТестВычислить(Группа, "Указатель HEAD", "git.head", "JSON(Значение).result = ""refs/heads/develop""");
	//ТестВычислить(Группа, "Переключение ветки", "git.checkout(""master"")", "JSON(git.head).result = ""refs/heads/master""");
	//
	//ЗаписатьГруппуТестов(Группа);
	
КонецПроцедуры

#КонецОбласти
